[[plugins]]
 repo = 'Shougo/ddc.vim'
 on_event = 'InsertEnter'
 depends = ['denops.vim']
 hook_source = '''
 call ddc#custom#patch_global('ui', 'native')
 call ddc#custom#patch_global('sources', ['nvim-lsp', 'around', 'vsnip'])
 call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \ 'matchers': ['matcher_head'],
      \ 'sorters': ['sorter_rank'],
      \ 'converters': ['converter_remove_overlap'],
      \ },
      \ 'around': {'mark': 'A'},
      \ 'nvim-lsp': {
      \ 'mark': 'L',
      \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \ },
      \ })

 call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

 inoremap <silent><expr> <TAB>
      \ ddc#map#pum_visible() ? '<C-n>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#map#manual_complete()
 inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

 call ddc#enable()
'''

[[plugins]]
 repo = 'Shougo/ddc-ui-native'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'Shougo/ddc-around'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'Shougo/ddc-matcher_head'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'Shougo/ddc-sorter_rank'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'Shougo/ddc-converter_remove_overlap'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'Shougo/ddc-nvim-lsp'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'hrsh7th/vim-vsnip'
 on_event = 'InsertEnter'
 depends = ['vim-vsnip-integ', 'friendly-snippets']
 hook_add = '''
 imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
 smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
 imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
 smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
 imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
 smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
 let g:vsnip_filetypes = {}
 '''

[[plugins]]
 repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
 repo = 'rafamadriz/friendly-snippets'

[[plugins]]
 repo = 'vim-denops/denops.vim'


[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
lua require("plugins.nvim-lspconfig")
'''

[[plugins]]
 repo ='williamboman/nvim-lsp-installer'
 on_source = 'nvim-lspconfig'

# [[plugins]]
#  repo = 'matsui54/ddc-nvim-lsp-doc'
#  on_source = 'ddc.vim'
#  hook_source = '''
#  let g:ddc_nvim_lsp_doc_config = {
#      \ 'documentation': {
#      \   'enable': v:true,
#      \   'border': 'single',
#      \   'maxWidth': 100,
#      \   'maxHeight': 60,
#      \   'winblend': 15,
#      \ },
#      \ 'signature': {
#      \   'border': 'single',
#      \   'maxHeight': 10,
#      \   'winblend': 15,
#      \ },
#      \ }
#  call ddc_nvim_lsp_doc#enable()
# '''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
	let g:popup_preview_config = {
	      \ 'delay': 30,
        \ 'maxWidth': 100,
        \ 'winblend': 0,
	      \ }
  call popup_preview#enable()
  let g:markdown_fenced_languages = ['ts=typescript']
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
	let g:signature_help_config = {
        \ 'style': 'virtual',
        \ 'border': v:false,
        \ }
  call signature_help#enable()
  let g:markdown_fenced_languages = ['ts=typescript']
'''

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
if = "has('nvim')"
on_source = 'nvim-lspconfig'

#############################################################################

[[plugins]]
repo = 'Shougo/deol.nvim'
on_source = 'denite.nvim'
hook_add = '''
  " nnoremap <silent> [Space]s :<C-u>Deol zsh -edit<CR>
  nnoremap <silent> [Space]n :<C-u>call deol#new({'command': 'fish'})<CR>
  nnoremap <silent> [Space]s :<C-u>Deol fish<CR>
  nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
'''
hook_source = '''
  " let g:deol#prompt_pattern = '\w*%'
  let g:deol#prompt_pattern = '%'
  " Set to $PATH.
  let s:bin = dein#get('vim-themis').rtp . '/bin'
  function! s:split_envpath(path) abort
    let delimiter = has('win32') ? ';' : ':'
    if stridx(a:path, '\' . delimiter) < 0
      return split(a:path, delimiter)
    endif
    let split = split(a:path, '\\\@<!\%(\\\\\)*\zs' . delimiter)
    return map(split,'substitute(v:val, ''\\\([\\'
          \ . delimiter . ']\)'', "\\1", "g")')
  endfunction
  function! s:join_envpath(list, orig_path, add_path) abort
    let delimiter = has('win32') ? ';' : ':'
    return (stridx(a:orig_path, '\' . delimiter) < 0
          \ && stridx(a:add_path, delimiter) < 0) ?
          \   join(a:list, delimiter) :
          \   join(map(copy(a:list),
          \        "substitute(v:path, ',\\|\\\\,\\@=', '\\\\\\0', 'g')"),
          \        delimiter)
  endfunction
  let $PATH = s:join_envpath(
        \ dein#util#_uniq(insert(
        \    s:split_envpath($PATH), s:bin)), $PATH, s:bin)
  let $THEMIS_HOME = dein#get('vim-themis').rtp
  unlet s:bin
'''

[plugins.ftplugin]
deol = '''
nnoremap <buffer><silent> [Space]gc
\ :<C-u>call deol#send('git commit')<CR>
nnoremap <buffer><silent> [Space]gA
\ :<C-u>call deol#send('git commit --amend')<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet'
on_event = 'InsertCharPre'
on_ft = 'snippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
hook_source = '''
let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'
let g:neosnippet#enable_snipmate_compatibility = 1
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
if has('conceal')
    set conceallevel=2 concealcursor=niv
endif
'''


[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = 'InsertLeave'
hook_source = '''
source ~/.config/nvim/plugins/quickrun.vim
'''

[[plugins]]	
repo = 'prettier/vim-prettier'	
build = 'npm install'	
on_ft = ['javascript', 'typescript', 'vue', 'css', 'scss', 'json', 'markdown']	
hook_add = '''	
source ~/.config/nvim/plugins/vim-prettier.rc.vim	
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'sjl/gundo.vim'
on_event = 'InsertLeave'
hook_source = '''
nnoremap <F5> :GundoToggle<CR>
'''

[[plugins]]
repo = 'tpope/vim-endwise'
on_event = 'InsertEnter'

[[plugins]]
repo = 'tpope/vim-surround'
on_event = 'InsertEnter'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'tpope/vim-fugitive'
on_event = 'InsertLeave'
hook_source = '''
source ~/.config/nvim/plugins/fugitive.vim
'''

# [[plugins]]
# repo = 'w0rp/ale'
# on_ft = ['python', 'javascript']
# hook_post_source = '''
# source ~/.config/nvim/plugins/ale.vim
# '''

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'dart-lang/dart-vim-plugin'

[[plugins]]
repo = 'thosakwe/vim-flutter'
hook_source = '''
source ~/.config/nvim/plugins/vim_flutter.vim
let g:hot_reload_on_save=1
'''

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'vim-syntastic/syntastic'
hook_add = '''
source ~/.config/nvim/plugins/syntastic.rc.vim
'''

# markdown preview plugins
[[plagins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:openbrowser_browser_commands = [ {'name': 'google-chrome-stable',  'args': ['{browser}', '{uri}']} ]
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = [ 'markdown', 'pandoc.markdown', 'rmd' ]
build = 'sh -c "cd app & yarn install" '

# [[plugins]]
# repo = 'skanehira/gh.vim'
# hook_add = '''
# source ~/.config/nvim/plugins/gh.rc.vim
# '''

[[plugins]]
repo = 'akinsho/flutter-tools.nvim'
depends = ['nvim-lua/plenary.nvim']
hook_source = '''
lua require("plugins.flutter-tools")
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_event = 'InsertLeave'
hook_add = '''
source ~/.config/nvim/plugins/easymotion.vim
'''

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave = 1
let g:go_template_autocreate = 0
'''

[[plugins]]
repo = 'buoto/gotests-vim'
hook_add = '''
nnoremap <silent> [Space]gt :GoTestFunc<CR>
'''


